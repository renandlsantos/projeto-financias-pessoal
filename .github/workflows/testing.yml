name: 🧪 Testing Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened ]

# Cancelar workflows anteriores se um novo push for feito
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Job 1: Lint e Type Check
  code-quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      # Backend Quality
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 📦 Install backend dependencies
        working-directory: ./backend
        run: |
          pip install -r requirements.txt
          pip install ruff mypy

      - name: 🔍 Backend lint with Ruff
        working-directory: ./backend
        run: ruff check app/ --output-format=github

      - name: 🔧 Backend format check with Ruff
        working-directory: ./backend
        run: ruff format --check app/

      - name: 🏷️ Backend type check with mypy
        working-directory: ./backend
        run: mypy app/ --config-file=pyproject.toml

      # Frontend Quality
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ./frontend/package-lock.json

      - name: 📥 Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: 🔍 Frontend lint with ESLint
        working-directory: ./frontend
        run: npm run lint

      - name: 🏷️ Frontend type check
        working-directory: ./frontend
        run: npm run type-check

  # Job 2: Backend Tests
  backend-tests:
    name: 🧪 Backend Tests
    runs-on: ubuntu-latest
    needs: code-quality

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: financeflow_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    env:
      DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/financeflow_test
      REDIS_URL: redis://localhost:6379
      SECRET_KEY: test-secret-key-for-ci
      ENVIRONMENT: test

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 📦 Install dependencies
        working-directory: ./backend
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio httpx

      - name: 🗄️ Run database migrations
        working-directory: ./backend
        run: |
          alembic upgrade head

      - name: 🧪 Run unit tests
        working-directory: ./backend
        run: |
          pytest tests/ -v \
            --cov=app \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term \
            --cov-fail-under=80 \
            --junitxml=test-results.xml

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

      - name: 📋 Upload test results
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Backend Tests
          path: ./backend/test-results.xml
          reporter: java-junit

  # Job 3: Frontend Tests
  frontend-tests:
    name: 🧪 Frontend Tests
    runs-on: ubuntu-latest
    needs: code-quality

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ./frontend/package-lock.json

      - name: 📥 Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: 🧪 Run unit tests with Vitest
        working-directory: ./frontend
        run: |
          npm run test:coverage

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/clover.xml
          flags: frontend
          name: frontend-coverage

      - name: 📋 Upload test results
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Frontend Tests
          path: ./frontend/test-results/junit.xml
          reporter: java-junit

  # Job 4: E2E Tests
  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: financeflow_e2e
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/financeflow_e2e
      SECRET_KEY: test-secret-key-for-e2e
      ENVIRONMENT: test

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      # Setup Backend
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 📦 Install backend dependencies
        working-directory: ./backend
        run: |
          pip install -r requirements.txt

      - name: 🗄️ Setup database
        working-directory: ./backend
        run: |
          alembic upgrade head

      - name: 🚀 Start backend server
        working-directory: ./backend
        run: |
          uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          sleep 10

      # Setup Frontend
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ./frontend/package-lock.json

      - name: 📥 Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: 🎭 Install Playwright browsers
        working-directory: ./frontend
        run: npx playwright install --with-deps

      - name: 🚀 Build and serve frontend
        working-directory: ./frontend
        run: |
          npm run build
          npm run preview &
          sleep 10
        env:
          VITE_API_URL: http://localhost:8000/api

      - name: 🧪 Run E2E tests
        working-directory: ./frontend
        run: |
          npx playwright test
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:4173

      - name: 📊 Upload Playwright report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: ./frontend/playwright-report/
          retention-days: 30

      - name: 📋 Upload E2E test results
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: E2E Tests
          path: ./frontend/test-results/junit.xml
          reporter: java-junit

  # Job 5: Security Scanning
  security:
    name: 🔐 Security Scanning
    runs-on: ubuntu-latest
    needs: code-quality

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      # Backend Security
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 🔍 Run Bandit security scan
        working-directory: ./backend
        run: |
          pip install bandit[toml]
          bandit -r app/ -f json -o bandit-report.json
        continue-on-error: true

      - name: 📊 Upload Bandit results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: ./backend/bandit-report.json

      # Frontend Security
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ./frontend/package-lock.json

      - name: 📥 Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: 🔍 Run npm audit
        working-directory: ./frontend
        run: npm audit --audit-level=critical

  # Job 6: Build and Integration Test
  build-integration:
    name: 🏗️ Build & Integration
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      # Test Docker builds
      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: false
          tags: financeflow-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🏗️ Build frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: false
          tags: financeflow-frontend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Test docker-compose
      - name: 🚀 Test docker-compose stack
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30
          
          # Health checks
          curl -f http://localhost:8000/health || exit 1
          curl -f http://localhost:3000 || exit 1
          
          docker-compose -f docker-compose.test.yml down

  # Job 7: Performance Tests
  performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: build-integration
    if: github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'performance')

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📦 Install Locust
        run: pip install locust

      - name: ⚡ Run load tests
        working-directory: ./backend
        run: |
          # Start application in background
          uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          sleep 10
          
          # Run load tests
          locust -f tests/performance/locustfile.py \
            --host=http://localhost:8000 \
            --users=50 \
            --spawn-rate=5 \
            --run-time=2m \
            --html=performance-report.html \
            --headless

      - name: 📊 Upload performance report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-report
          path: ./backend/performance-report.html

# Notification de status
  notify:
    name: 📢 Notification
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests, security, build-integration]
    if: always()

    steps:
      - name: 💬 Notify success
        if: needs.backend-tests.result == 'success' && needs.frontend-tests.result == 'success' && needs.e2e-tests.result == 'success'
        run: |
          echo "✅ All tests passed successfully!"
          
      - name: 💬 Notify failure
        if: contains(needs.*.result, 'failure')
        run: |
          echo "❌ Some tests failed. Please check the logs."
          exit 1
